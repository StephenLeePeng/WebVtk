<server>
    <application-settings location="*">

 <!-- Session management. -->
	<session-management>
            <!-- Every session runs within a dedicated process.

	       This mode guarantees kernel-level session privacy, but as every
	       session requires a seperate process, it is also an easy target
	       for DoS attacks if not shielded by access control.

	       Note: currently only supported by the wtfcgi and wthttp
	       connectors.
              -->

	    
	    <dedicated-process>
			 <max-num-sessions>10</max-num-sessions>
	    </dedicated-process>
	    
	    <!-- Multiple sessions within one process.

	       This mode spawns a number of processes, and sessions are
	       allocated randomly to one of these processes (you should not
	       use this for dynamic FCGI servers, but only in conjunction
	       with a fixed number of static FCGI servers.

	       This requires careful programming, as memory corruption in one
	       session will kill all of the sessions in the same process. You
	       should debug extensively using valgrind. Also, it is your
	       responsibility to keep session state not interfering and
	       seperated.

	       On the other hand, sessions are inexpensive, and this mode
	       suffers far less from DoS attacks than dedicated-process mode.
	       Use it for non-critical and well-debugged web applications.

	       Note: the wthttp connector will ignore the num-processes
	       setting and use only process.
              -->
        <!--      
	    <shared-process>
	        <num-processes>1</num-processes>
	    </shared-process>
		-->
	    <!-- Session tracking strategy.

	       Possible values:
		 Auto: cookies is available, otherwise URL rewriting
		 URL:  only URL rewriting

               It is recommended to stick to URL rewriting for session
	       tracking as this is more secure (it avoids the risk of attacks
	       like CSRF or BREACH), and also provides proper support for
	       concurrent sessions in a single browser.
	      -->
	    <tracking>URL</tracking>

	    <!-- How reload should be handled.

	       When reload should (or rather, may) spawn a new session, then
	       even in the case cookies are not used for session management,
	       the URL will not be cluttered with a sessionid.
	       However, WApplication::refresh() will never be called.
	      -->
	    <reload-is-new-session>true</reload-is-new-session>

	    <!-- Session timeout (seconds).

	       When a session remains inactive for this amount of time, it is
	       cleaned up.
	      -->
	    <timeout>600</timeout>

	    <!-- Server push timeout (seconds).

               When using server-initiated updates, the client uses
               long-polling requests. Proxies (including reverse
               proxies) are notorious for silently closing idle
               requests; the client therefore cancels the request
               periodically and issues a new one. This timeout sets
               the frequency.
	      -->
	    <server-push-timeout>50</server-push-timeout>
	</session-management>

        <!-- Javascript debug options

	     Values:
	     - naked: JavaScript errors are not caught at all
	     - false: JavaScript errors are caught and a simple error message
	              is printed to indicate that something is terribly wrong
	     - stack: equivalent to 'false'
	     - true: JavaScript errors are rethrown after server-side logging

             Unless the value is 'naked',
	     WApplication::handleJavaScriptError() is called which by
	     default logs the error and terminates the session.
	  -->
	<debug>false</debug>

	<!-- Log file

	   When the log file is empty, or omitted, logging is done to
	   stderr. This may end up in the web server error log file
	   (e.g. for apache + fastcgi module), or on stderr (e.g. for
	   the built-in httpd).
         -->
	<log-file></log-file>

	<!-- Logger configuration

	   This configures the logger. With the default configuration,
	   everything except for debugging messages are logged.

	   The configuration is a string that defines rules for
	   enabling or disabling certain logging. It is a white-space
	   delimited list of rules, and each rule is of the form:

	     [-]level : enables (or disables) logging of messages of
	     the given level; '*' is a wild-card that matches all
	     levels

	     [-]level:scope : enables (or disables) logging of
	     messages of the given level and scope; '*' is a wild-card
	     that matches all levels or scopes.  The default
	     configuration is "* -debug", i.e. by default everything
	     is logged, except for "debug" messages.

	   Some other examples:

	     "* -debug debug:wthttp": logs everything, including
	     debugging messages of scope "wthttp", but no other
	     debugging messages.

	     "* -info -debug": disables logging of info messages
	     in addition to debugging messages.

	   Note debugging messages are only emitted when debugging
	   has been enabled while building Wt.
	  -->
	<log-config>* -debug</log-config>

	<!-- Whether we are sitting behind a reverse proxy 

	   When deployed behind a reverse proxy (such as Apache or Squid),
	   the server location is not read from the "Host" header,
	   but from the X-Forwarded-For header, if present.

           This option is required to make e.g. clientAddress() return the
           correct address.
	  -->
	<behind-reverse-proxy>false</behind-reverse-proxy>


	<web-sockets>true</web-sockets>
	<!-- <progressive-bootstrap>true</progressive-bootstrap> -->
	<properties>

	    <!-- You need to register at google for this to work, and enter
                 there the same values as you do here. -->
            <!--
	    <property name="google-oauth2-redirect-endpoint">
		http://localhost:8080/oauth2callback
	    </property>
	    <property name="google-oauth2-client-id">
		00000000000.apps.googleusercontent.com
	    </property>
	    <property name="google-oauth2-client-secret">
		abcdefghijk-123456789xyz
	    </property>
            -->
	</properties>
    </application-settings>
</server>
